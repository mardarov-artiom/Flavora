/*
 class grid-container is required on container box
 class grid-item is required on every item inside container

 <-- Example of usage -->

 <div class="grid-container jc-center ai-center mt-2 xl-mt-4 spacing-4 xl-spacing-8">
  <div class="grid-item xs-12 md-6 lg-4 offset-sm-5">Content</div>
  <div class="grid-item xs-5 md-8">Content</div>
  <div class="grid-item xs-1 md-6 lg-12">Content</div>
 </div>
*/

/* Define screen sizes for grid layout */
$screenSizes: (
        xs: 360,
        sm: 768,
        md: 1024,
        lg: 1366,
);

/* Spacing value between grid items */
$spacing: 8;
$double-spacing: $spacing * 2;

/* Rule to define how many columns grid should use */
$grid-columns: 12;

/* Base container class */
.grid-container {
  display: flex;
  flex-wrap: wrap;
  margin-inline: -$spacing + px;
  box-sizing: border-box;
  width: calc(100% + #{$double-spacing * 2 + px});
  gap: #{$double-spacing * 2 + px} 0;

  /* Grid Container justify-content options */
  &.jc-start {
    justify-content: flex-start;
  }

  &.jc-end {
    justify-content: flex-end;
  }

  &.jc-center {
    justify-content: center;
  }

  &.jc-between {
    justify-content: space-between;
  }

  &.jc-around {
    justify-content: space-around;
  }

  /* Grid Container align-items options */
  &.ai-start {
    align-items: flex-start;
  }

  &.ai-end {
    align-items: flex-end;
  }

  &.ai-center {
    align-items: center;
  }

  /* Grid Container nowrap option */
  .no-wrap {
    flex-wrap: nowrap;
  }
}

/* Base item class */
.grid-item {
  flex-grow: 0;
  max-width: 100%;
  flex-basis: 100%;
  padding-inline: $spacing + px;
  box-sizing: border-box;
}

@for $i from 0 through $grid-columns {
  /* Defining base grid spacing */
  .grid-container.spacing-#{$i} {
    width: calc(100% + #{$spacing * $i + px});
    margin-inline: -($spacing * $i / 2) + px;
    gap: #{$spacing * $i}px 0;

    > .grid-item {
      padding-inline: #{($spacing * $i) / 2}px;
    }
  }

  /* Helper classes for adding margin top to element */
  .mt-#{$i} {
    margin-top: $spacing * $i + px;
  }

  /* Helper classes for adding margin bottom to element */
  .mb-#{$i} {
    margin-bottom: $spacing * $i + px;
  }
}

/* Loop for defining base grid, based on columns defined above */
@each $key, $size in $screenSizes {
  @for $i from 0 through $grid-columns {
    @media (min-width: #{$size}px) {
      /* Defining grid spacing based on screen size */
      .grid-container.#{$key}-spacing-#{$i} {
        width: calc(100% + #{$spacing * $i + px});
        margin-inline: -($spacing * $i / 2) + px;
        gap: #{$spacing * $i}px 0;

        > .grid-item {
          padding-inline: #{($spacing * $i) / 2}px;
        }
      }

      /* Defining grid element size based on screen size */
      .grid-item.#{$key}-#{$i} {
        flex-grow: 0;
        max-width: 100% / $grid-columns * $i;
        flex-basis: 100% / $grid-columns * $i;
      }

      /* Defining grid element offset based on screen size */
      .grid-item.offset-#{$key}-#{$i} {
        margin-left: 100% / $grid-columns * $i;
      }



      /* Helper classes for adding margin top to element depending on screen width */
      .#{$key}-mt-#{$i} {
        margin-top: $spacing * $i + px;
      }

      /* Helper classes for adding margin bottom to element depending on screen width */
      .#{$key}-mb-#{$i} {
        margin-bottom: $spacing * $i + px;
      }
    }
  }
}